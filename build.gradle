buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:2.0.3'
    }
}

plugins {
    id "nebula.os-package-base" version "2.0.3"
}
apply plugin: 'java'
apply plugin: 'groovy'

sourceCompatibility = 1.6
targetCompatibility = 1.6

group = "com.ifountain.opsgenie-integration"

project.ext.versions = new Properties();
project.ext.versions.load(new FileInputStream("${projectDir}/version.properties"))
if(gradle.startParameter.taskNames.contains('removeSnapshot')) {
    project.ext.versionSuffix = ''
} else {
    project.ext.versionSuffix = '-SNAPSHOT'
}

version = project.ext.versions.getProperty('sdk') + project.ext.versionSuffix

sourceSets {
    main {
        groovy {
            include "*/marid/scripts"
        }
    }
}


dependencies {
    compile project(":marid")
}

subprojects  {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    group = "com.opsgenie.integration"
    version = rootProject.version

    project.ext.versions = new Properties();
    project.ext.versions.load(new FileInputStream("${rootProject.projectDir}/version.properties"))



    if(project.ext.versions.getProperty(name) != null) {
        version = project.ext.versions.getProperty(name)
    }

    if(gradle.startParameter.taskNames.contains('removeSnapshot')) {
        project.ext.versionSuffix = ''
    } else {
        project.ext.versionSuffix = '-SNAPSHOT'
    }

    repositories {
        mavenCentral()
        maven {
            url "http://repo.opsgenie.com/content/groups/public/"
        }
    }

    test.onlyIf {
        false
    }

    jar {
        manifest {
            attributes("Built-By": "http://www.opsgenie.com",
                    "Specification-Title": project.name[0].toUpperCase() + project.name[1..-1],
                    "Specification-Product": project.name,
                    "Specification-Version": project.version,
                    "Specification-Vendor": "http://www.opsgenie.com",
                    "Implementation-Title" : project.name[0].toUpperCase() + project.name[1..-1],
                    "Implementation-Product": project.name,
                    "Implementation-Vendor":"http://www.opsgenie.com",
                    "Implementation-Version":project.version,
            )
        }
    }

}

repositories {
    mavenCentral()
    maven {
        url "http://repo.opsgenie.com/content/groups/public/"
    }
}

configurations {
    netcool
    debian
}

dependencies {
    netcool 'com.sybase.jdbc:sybase:5.5.OG'
    debian 'org.vafer:jdeb:1.3'
}

task generateIntegration(dependsOn: 'marid:generateBaseForIntegration')

task generateIntegrationForNative(dependsOn: 'generateIntegration') << {
    copy {
        from("${project(':common').projectDir}/native")
        into("${project.buildDir}/native")
    }
}

task packageLamp(dependsOn: 'generateLampZip', type: Zip) {
    from "${buildDir}/zip"
    baseName = "opsgenie-lamp"
    version = project.ext.versions.getProperty('lamp') + project.ext.versionSuffix
}

task generateLampZip << {
    def lampProjectDir = "${System.getenv("GOPATH")}/src/github.com/opsgenie/opsgenie-lamp";
    generateLampBinary(lampProjectDir)

    copy {
        from "${lampProjectDir}/LICENSE"
        into "${buildDir}/zip/lamp"
    }

    copy {
        from "${lampProjectDir}/NOTICE"
        into "${buildDir}/zip/lamp"
    }

    copy {
        from "${lampProjectDir}/opsgenie-lamp.exe"
        into "${buildDir}/zip/lamp"
        rename "opsgenie-lamp.exe", "lamp.exe"
    }

    copy {
        from ("${lampProjectDir}/opsgenie-lamp") {
            fileMode = 0755
        }
        into "${buildDir}/zip/lamp"
        rename "opsgenie-lamp", "lamp"
    }

    copy {
        from("${lampProjectDir}/conf")
        into "${buildDir}/zip/lamp/conf"
    }
}

def generateLampBinary(String lampProjectPath){
    def isWindows = System.getProperty('os.name').toLowerCase().contains("win");
    if (isWindows) {
        executeCommandAndWait("cmd /c ${lampProjectPath}/build_lamp.bat", "generating lamp binaries")
    }else{
        executeCommandAndWait("${lampProjectPath}/build_lamp", "generating lamp binaries")
    }

    if (!(new File("${lampProjectPath}/opsgenie-lamp").exists() && new File("${lampProjectPath}/opsgenie-lamp.exe").exists())){
        if(System.getenv("IS_LAMP_MANDATORY")){
            throw new TaskExecutionException(tasks.generateLampZip, new Exception("one of or both [opsgenie-lamp, opsgenie-lamp.exe] executables are missing"))
        }else{
            def message = "one of or both [opsgenie-lamp, opsgenie-lamp.exe] executables are missing. Lamp package will not be generated, integration packages containing lamp will be generated without lamp."
            println message
            throw new StopActionException(message)
        }
    }
}

def executeCommandAndWait(command , logPrefix = "")  {
    println logPrefix+" execute :"+command
    def proc = command.execute();
    def out = new StringBuilder()
    def err = new StringBuilder()
    proc.waitForProcessOutput(out, err)
    if (out) println logPrefix+" out:\n$out"
    if(proc.exitValue()){
        if(System.getenv("IS_LAMP_MANDATORY")){
            throw new TaskExecutionException(tasks.generateLampZip, new Exception(err.toString()))
        }else{
            def message = "Exception occured while building lamp. Lamp package will not be generated, integration packages containing lamp will be generated without lamp."
            println message
            throw new StopActionException(message)
        }
    }
    println logPrefix+" execute finished"
}

def addLampToIntegrationPackage(String buildDir, String destination){
    tasks.generateLampZip.execute()

    if(!new File("${buildDir}/zip/lamp").exists()) {
        def message = "Could not find Lamp directory. Packages containing lamp will be generated without lamp."
        println message
        throw new StopActionException(message)
    }
    copy{
        from "${buildDir}/zip/lamp"
        into "${destination}/opsgenie-integration/lamp"
    }

    def tempLampConfFilePath = "${destination}/opsgenie-integration/lamp/conf/lamp_temp.conf"
    new File(tempLampConfFilePath).withPrintWriter { out ->
        new File("${destination}/opsgenie-integration/lamp/conf/lamp.conf").eachLine { line ->
            if (!line.startsWith("apiKey")){
                out.println("${line}")
            }else{
                out.println()
            }
        }
    }

    mergeConfFile("${destination}/opsgenie-integration/conf/opsgenie-integration.conf",
            tempLampConfFilePath,
            "${destination}/opsgenie-integration/conf/opsgenie-integration.conf")

    delete "${destination}/opsgenie-integration/lamp/conf"
}


def mergeConfFile(String mainConfFile, String partialConfFilePath, String destinationFilePath){
    def partialConfFile = new File(partialConfFilePath)
    String wholeConfFile = new File(mainConfFile).getText() +"\n"+ partialConfFile.getText();
    def destFile = new File(destinationFilePath)
    destFile.setText(wholeConfFile);
}

def copyNativeFiles(String sourceDir) {
    copy {
        from("${project.buildDir}/native")
        into("${project.buildDir}/os_client/${sourceDir}")
    }
}

def buildRpm(String sourceDir, String name, String descrpt, Map fileMappingInput, Map configFilesInput) {
    def taskName = "generateRpm${sourceDir}"

    def configFiles = [:]
    configFiles.putAll(configFilesInput)
    def fileMapping = [:]
    fileMapping.putAll(fileMappingInput)

    task "${taskName}"(type: Rpm) {

        def nativeSource = "${project.buildDir}/os_client/${sourceDir}";

        def packageVersion = project.ext.versions.getProperty(sourceDir) + project.ext.versionSuffix

        packageName = name
        description = descrpt
        summary = descrpt
        packageDescription = descrpt + ". Please see doc for details: https://www.opsgenie.com/docs/"
        version = packageVersion.replace("-", ".");
        os = LINUX
        user = 'root'

        release = '1.all'
        packager = "ifountain"
        vendor = "opsgenie"
        url = "https://www.opsgenie.com"
        license = "Apache License 2.0"
        buildHost = "repo.opsgenie.com"
        packageGroup = "System Administration Tools"


        configFiles.put("${project.buildDir}/${sourceDir}/opsgenie-integration/conf/opsgenie-integration.conf", 'etc/opsgenie/conf')
        configFiles.put("${project.buildDir}/${sourceDir}/opsgenie-integration/marid/conf/log.properties", 'etc/opsgenie/marid')

        // The code block below is added not to replace default Marid scripts if the user had customized those scripts.
        // The package will replace integration-only Marid scripts (like marid2opsgenie.groovy, nagiosActionExecutor.groovy), but won't touch
        // to default Marid scripts (like UnAcknowledge.groovy) if the user had customized it.
        // If the user didn't touch the Marid script and we updated it in the new package, it will be got updated.

        def confFilesToBeDeleted = []

        File maridScriptsDir = new File("${project.buildDir}/${sourceDir}/opsgenie-integration/marid/scripts")
        def maridScripts = maridScriptsDir.listFiles()

        for(def maridScript : maridScripts) {
            configFiles.put(maridScript.getAbsolutePath(), 'var/opsgenie/marid/scripts')
        }

        File intScriptsDir = new File("${projectDir}/${sourceDir}/marid/scripts")
        def intScripts = intScriptsDir.listFiles()

        for(def confFile : configFiles.keySet()) {
            File fConfFile = new File(confFile.toString())

            for(def intScript : intScripts) {
                if (fConfFile.getName().equals(intScript.getName())) {
                    if (!confFilesToBeDeleted.contains(confFile)) {
                        confFilesToBeDeleted.add(confFile);
                    }
                }
            }
        }

        for(def confFile : confFilesToBeDeleted) {
            configFiles.remove(confFile)
        }

        // #################################################################################################################################

        fileMapping.put("${project.buildDir}/${sourceDir}/opsgenie-integration/marid/scripts", 'var/opsgenie/marid/scripts')
        fileMapping.put("${project.buildDir}/${sourceDir}/opsgenie-integration/marid/conf/.keystore", 'etc/opsgenie/marid')
        fileMapping.put("${project.buildDir}/${sourceDir}/opsgenie-integration/marid/lib", 'var/lib/opsgenie/marid')

        for (def source : configFiles.keySet()) {
            def dest = configFiles.get(source)
            logger.info("config " + source + " - " + dest)
            from(source) {
                fileType CONFIG | NOREPLACE
                into(dest)
            }
        }

        for(def source : fileMapping.keySet()) {
            def dest = fileMapping.get(source)
            logger.info(source + " - " + dest)
            from(source) {
                into(dest)
            }
        }

        from("${nativeSource}/profile"){
            into("etc/opsgenie")
        }

        from("${nativeSource}/marid_rpm"){
            into("etc/init.d")
            rename 'marid_rpm', 'marid'
        }

        preInstall file("${nativeSource}/ogBefore.sh")
        postInstall file("${nativeSource}/ogAfter.sh")
    }

    tasks[taskName].execute()
}

def buildDeb(String sourceDir, String name, String descrpt, Map fileMappingInput, Map configFilesInput) {

    def packageVersion = project.ext.versions.getProperty(sourceDir) + project.ext.versionSuffix
    packageVersion = packageVersion.replace("-", ".")

    def taskName = "prepareDeb${sourceDir}"
    def dataDir = "${project.buildDir}/debian_tmp/${sourceDir}/data"
    def controlDir = "${project.buildDir}/debian_tmp/${sourceDir}/control"

    def configFiles = [:]
    configFiles.putAll(configFilesInput)
    def fileMapping = [:]
    fileMapping.putAll(fileMappingInput)

    task "${taskName}" << {

        def nativeSource = "${project.buildDir}/os_client/${sourceDir}";

        fileMapping.put("${project.buildDir}/${sourceDir}/opsgenie-integration/conf/opsgenie-integration.conf", 'etc/opsgenie/conf')

        fileMapping.put("${project.buildDir}/${sourceDir}/opsgenie-integration/marid/scripts", 'var/opsgenie/marid/scripts')
        fileMapping.put("${project.buildDir}/${sourceDir}/opsgenie-integration/marid/conf", 'etc/opsgenie/marid')
        fileMapping.put("${project.buildDir}/${sourceDir}/opsgenie-integration/marid/lib", 'var/lib/opsgenie/marid')
        fileMapping.put("${project.buildDir}/${sourceDir}/opsgenie-integration/conf", 'etc/opsgenie/conf')

        for(def source : fileMapping.keySet()) {
            def dest = fileMapping.get(source)
            logger.info(source + " - " + dest)
            copy {
                from(source)
                into("${dataDir}/${dest}")
            }
        }

        copy {
            from("${buildDir}/os_client/${sourceDir}/conffiles_deb")
            into("${controlDir}")
            rename "conffiles_deb", 'conffiles'
        }

        //conf files
        StringBuilder appender = new StringBuilder()
        for (def source : configFiles.keySet()) {
            def dest = configFiles.get(source)
            logger.info(source + " - " + dest)
            copy {
                from(source)
                into("${dataDir}/${dest}")
            }

            appender.append("/${dest}/${source.tokenize('/')[-1]}\n")
        }

        def conffiles = new File("${controlDir}/conffiles")
        conffiles.append("\n" + appender.toString())

        copy {
            from("${nativeSource}/profile")
            into("${dataDir}/etc/opsgenie")
        }

        copy {
            from("${nativeSource}/marid_deb")
            into("${dataDir}/etc/init.d")
            rename 'marid_deb', 'marid'
        }

        copy {
            from "${nativeSource}/control_deb"
            filter {
                it.replace('[description]', descrpt)
                        .replace('[version]', packageVersion)
                        .replace('[package-name]', "${name}")
            }
            into controlDir
            rename "control_deb", "control"
        }

        copy {
            from "${nativeSource}/ogBefore.sh"
            into controlDir
            rename "ogBefore.sh", "preinst"
        }

        copy {
            from "${nativeSource}/ogAfter.sh"
            into controlDir
            rename "ogAfter.sh", "postinst"
        }

        ant {
            taskdef(name: 'deb', classname: 'org.vafer.jdeb.ant.DebAntTask', classpath: configurations.debian.asPath)
        }
        ant.deb(destfile: "${project.buildDir}/distributions/${name}_${packageVersion}_all.deb", control: controlDir) {
            ant.data(src: dataDir, type: 'directory', dst: '/')
        }

        delete "${project.buildDir}/distributions/${name}_${packageVersion}_all.changes"
    }

    tasks[taskName].execute()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

apply from: 'release.gradle'
apply from: 'sdk.gradle'

//apply scripts
apply from: 'nagios/nagios.gradle'
apply from: 'nagiosxi/nagiosxi.gradle'
apply from: 'netcool/netcool.gradle'
apply from: 'zabbix/zabbix.gradle'
apply from: 'redmine/redmine.gradle'
apply from: 'zenoss/zenoss.gradle'
apply from: 'icinga/icinga.gradle'
apply from: 'zendesk/zendesk.gradle'
apply from: 'icinga2/icinga2.gradle'
apply from: 'solarwinds/solarwinds.gradle'
apply from: 'oem/oem.gradle'
apply from: 'vcenter/vcenter.gradle'
apply from: 'vcsa/vcsa.gradle'
apply from: 'xmpp/xmpp.gradle'
apply from: 'trackit/trackIt.gradle'
apply from: 'webex/webex.gradle'
apply from: 'jira/jira.gradle'
apply from: 'dynatraceappmon/dynatraceappmon.gradle'
apply from: 'op5/op5.gradle'


task packageIntegrations(dependsOn: [
//                              'packageSmarts',
//                              'packageSplunk',
//                              'packageOpennms',
                                'packageNagios',
                                'packageNagiosxi',
                                'packageNetcool',
                                'packageZabbix',
                                'packageRedmine',
                                'packageZenoss',
                                'packageIcinga',
                                'packageZendesk',
                                'packageIcinga2',
                                'packageSolarwinds',
                                'packageOEM',
                                'packageTrackIt',
                                'packageXmpp',
                                'packageWebex',
                                'packageJira',
                                'packageDynatraceAppMon',
                                'packageOP5',
                                'packageVCSA'
])

task packageAll(dependsOn: ['packageIntegrations', 'packageLamp'])
